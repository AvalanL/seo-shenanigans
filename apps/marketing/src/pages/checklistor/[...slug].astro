---
import BaseLayout from "~/layouts/BaseLayout.astro";
import RelatedArticles from "~/components/RelatedArticles.astro";
import { getCollection } from "astro:content";
import { getOpenGraphImage } from "~/utils/openGraph";

export async function getStaticPaths() {
  const entries = await getCollection("checklistor", ({ data }) => data.status !== "draft");
  return entries.map((entry) => ({
    params: { slug: entry.slug }
  }));
}


const slugArray = Astro.params.slug;
const slug = Array.isArray(slugArray) ? slugArray.join("/") : slugArray;

if (!slug) {
  throw new Error("Slug saknas");
}

const entries = await getCollection("checklistor", ({ data }) => data.status !== "draft");
const entry = entries.find((item) => item.slug === slug);

if (!entry) {
  throw new Error(`Hittade ingen checklista för slug '${slug}'`);
}

const { Content, headings } = await entry.render();

// Generate Open Graph image
const ogImage = getOpenGraphImage('checklist', { title: entry.data.title });
---
<BaseLayout
  title={entry.data.title}
  description={entry.data.description}
  publishedTime={entry.data.publishedAt?.toISOString()}
  modifiedTime={entry.data.updatedAt?.toISOString()}
  image={ogImage}
  schema={{
    "@context": "https://schema.org",
    "@type": entry.data.schemaType,
    headline: entry.data.title,
    description: entry.data.description,
    inLanguage: "sv-SE",
    url: `${Astro.site}checklistor/${entry.slug}`,
    author: {
      "@type": "Person",
      name: entry.data.author
    },
    datePublished: entry.data.publishedAt?.toISOString(),
    dateModified: entry.data.updatedAt?.toISOString()
  }}
>
  <article class="article">
    <header>
      <p class="category">Checklista</p>
      <h1>{entry.data.title}</h1>
      <p class="summary">{entry.data.summary}</p>
      <div class="meta">
        {entry.data.updatedAt && <span>Uppdaterad: {entry.data.updatedAt.toLocaleDateString("sv-SE")}</span>}
        {entry.data.publishedAt && <span>Publicerad: {entry.data.publishedAt.toLocaleDateString("sv-SE")}</span>}
        <span>Författare: {entry.data.author}</span>
      </div>
    </header>
    {headings.length > 2 && (
      <nav class="toc" aria-label="Innehåll">
        <p>Innehåll</p>
        <ul>
          {headings
            .filter((heading) => heading.depth === 2)
            .map((heading) => (
              <li><a href={`#${heading.slug}`}>{heading.text}</a></li>
            ))}
        </ul>
      </nav>
    )}
    <Content />
    {entry.data.faq && entry.data.faq.length > 0 && (
      <section class="faq">
        <h2>Vanliga frågor</h2>
        <dl>
          {entry.data.faq.map((item) => (
            <div>
              <dt>{item.question}</dt>
              <dd>{item.answer}</dd>
            </div>
          ))}
        </dl>
      </section>
    )}
    {entry.data.sources && entry.data.sources.length > 0 && (
      <section class="sources">
        <h2>Källor</h2>
        <ul>
          {entry.data.sources.map((source) => (
            <li><a href={source.url}>{source.label}</a></li>
          ))}
        </ul>
      </section>
    )}
  </article>
  <RelatedArticles currentSlug={`checklistor/${entry.slug}`} related={entry.data.related} />
</BaseLayout>

<style>
  .article {
    display: block;
  }

  .article > header {
    margin-bottom: 2rem;
  }

  .article > .toc {
    margin-bottom: 2rem;
  }

  .article > section {
    margin-top: 2.5rem;
  }

  .category {
    font-size: 0.85rem;
    text-transform: uppercase;
    letter-spacing: 0.2em;
    color: #9c5e3c;
    font-weight: 600;
  }

  .summary {
    font-size: 1.15rem;
    color: rgba(31, 28, 20, 0.78);
  }

  .meta {
    display: flex;
    gap: 1.5rem;
    flex-wrap: wrap;
    font-size: 0.85rem;
    color: rgba(31, 28, 20, 0.6);
  }

  .toc {
    border: 1px solid rgba(0, 0, 0, 0.08);
    border-radius: 1rem;
    padding: 1.5rem;
    background: #fff;
  }

  .toc ul {
    margin: 0.5rem 0 0;
    padding-left: 1rem;
  }

  .faq {
    border-top: 1px solid rgba(0, 0, 0, 0.08);
    padding-top: 1.5rem;
  }

  .sources ul {
    padding-left: 1.2rem;
  }

  .sources a {
    color: #1f1c14;
  }
</style>
