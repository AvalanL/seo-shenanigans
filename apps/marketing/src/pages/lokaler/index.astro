---
import BaseLayout from "~/layouts/BaseLayout.astro";
import DirectoryCard from "~/components/directory/DirectoryCard.astro";
import VenueMap from "~/components/directory/VenueMap.astro";
import { getCollection } from "astro:content";

const normalizeWhitespace = (value: string) =>
  value
    .replace(/\s+/g, " ")
    .trim();

const removePostalPrefix = (value: string) =>
  value
    .replace(/\b\d{2,}\b/g, " ")
    .replace(/\s+/g, " ")
    .trim();

const splitLocationFragments = (value?: string | null) => {
  if (!value) return [] as string[];
  return value
    .split(/[\n,/]/)
    .map((part) => normalizeWhitespace(removePostalPrefix(part)))
    .filter(
      (part) =>
        part.length > 0 &&
        !/vägbeskrivning/i.test(part) &&
        !/^sverige$/i.test(part) &&
        !/^se$/i.test(part),
    );
};

const titleCase = (value: string) =>
  value
    .split("-")
    .map((segment) =>
      segment
        .split(" ")
        .map((word) =>
          word
            ? word[0].toLocaleUpperCase("sv-SE") + word.slice(1).toLocaleLowerCase("sv-SE")
            : word,
        )
        .join(" "),
    )
    .join("-")
    .replace(/\s+/g, " ")
    .trim();

const dedupeCaseInsensitive = (values: string[]) => {
  const seen = new Set<string>();
  const result: string[] = [];
  for (const value of values) {
    const key = value.toLocaleLowerCase("sv-SE");
    if (!seen.has(key)) {
      seen.add(key);
      result.push(value);
    }
  }
  return result;
};

const stripDiacritics = (value: string) =>
  value.normalize('NFD').replace(/[\u0300-\u036f]/g, '');

const normalizeCountyKey = (value: string) =>
  stripDiacritics(value || '')
    .toLowerCase()
    .replace(/län|lan|county|region|kommun|stad/g, '')
    .replace(/[^a-z\s-]/g, ' ')
    .replace(/\s+/g, ' ')
    .trim();

const CANONICAL_COUNTIES = [
  'Blekinge län',
  'Dalarnas län',
  'Gotlands län',
  'Gävleborgs län',
  'Hallands län',
  'Jämtlands län',
  'Jönköpings län',
  'Kalmar län',
  'Kronobergs län',
  'Norrbottens län',
  'Skåne län',
  'Stockholms län',
  'Södermanlands län',
  'Uppsala län',
  'Värmlands län',
  'Västerbottens län',
  'Västernorrlands län',
  'Västmanlands län',
  'Västra Götalands län',
  'Örebro län',
  'Östergötlands län',
];

const DEFAULT_COUNTY = 'Övriga län';

const countyAliasMap = new Map<string, string>();

const registerCountyAlias = (alias: string, county: string) => {
  const key = normalizeCountyKey(alias);
  if (key) {
    countyAliasMap.set(key, county);
  }
};

CANONICAL_COUNTIES.forEach((county) => {
  registerCountyAlias(county, county);
  registerCountyAlias(county.replace(/ län$/i, ''), county);
});

[
  ['Skåne', 'Skåne län'],
  ['Malmö', 'Skåne län'],
  ['Lund', 'Skåne län'],
  ['Staffanstorp', 'Skåne län'],
  ['Svalöv', 'Skåne län'],
  ['Kivik', 'Skåne län'],
  ['Hjärnarp', 'Skåne län'],
  ['Södermanland', 'Södermanlands län'],
  ['Stockholm', 'Stockholms län'],
  ['Sundbyberg', 'Stockholms län'],
  ['Nacka', 'Stockholms län'],
  ['Östermalm', 'Stockholms län'],
  ['Göteborg', 'Västra Götalands län'],
  ['Västra Götaland', 'Västra Götalands län'],
  ['Säve', 'Västra Götalands län'],
  ['Borås', 'Västra Götalands län'],
  ['Halland', 'Hallands län'],
  ['Varberg', 'Hallands län'],
  ['Tvååker', 'Hallands län'],
  ['Rolfstorp', 'Hallands län'],
  ['Mellbystrand', 'Hallands län'],
  ['Blekinge', 'Blekinge län'],
  ['Kalmar', 'Kalmar län'],
  ['Djurkälla', 'Kalmar län'],
  ['Kronoberg', 'Kronobergs län'],
  ['Jönköping', 'Jönköpings län'],
  ['Östergötland', 'Östergötlands län'],
  ['Stugan i Stadsparken', 'Östergötlands län'],
  ['Sturefors', 'Östergötlands län'],
  ['Bjärka-Säby', 'Östergötlands län'],
  ['Uppsala', 'Uppsala län'],
  ['Älvkarleby', 'Uppsala län'],
  ['Gävleborg', 'Gävleborgs län'],
  ['Örebro', 'Örebro län'],
  ['Dalarna', 'Dalarnas län'],
  ['Jämtland', 'Jämtlands län'],
  ['Gotland', 'Gotlands län'],
  ['Ljugarn', 'Gotlands län'],
  ['Bjärka Säby', 'Östergötlands län'],
  ['Köpmanholmen', 'Västernorrlands län'],
  ['Västernorrland', 'Västernorrlands län'],
  ['Västerbotten', 'Västerbottens län'],
  ['Norrbotten', 'Norrbottens län'],
  ['Västmanland', 'Västmanlands län'],
  ['Skultuna', 'Västmanlands län'],
  ['Västerås', 'Västmanlands län'],
  ['Sverige', DEFAULT_COUNTY],
  ['Flexibelt', DEFAULT_COUNTY],
  ['Eldsberga', 'Hallands län'],
  ['Hjärnarp', 'Skåne län'],
  ['Säve', 'Västra Götalands län'],
].forEach(([alias, county]) => registerCountyAlias(alias, county));

const mapToCounty = (candidates: string[], fallbackCity: string) => {
  const extendedCandidates = dedupeCaseInsensitive([
    ...candidates,
    ...candidates.flatMap((candidate) => candidate.split(' ')),
    fallbackCity,
  ]);

  for (const candidate of extendedCandidates) {
    const normalized = normalizeCountyKey(candidate);
    if (!normalized) continue;
    const direct = countyAliasMap.get(normalized);
    if (direct) {
      return direct;
    }
    for (const county of CANONICAL_COUNTIES) {
      const countyKey = normalizeCountyKey(county);
      if (countyKey && (normalized === countyKey || countyKey.includes(normalized) || normalized.includes(countyKey))) {
        return county;
      }
    }
  }

  return DEFAULT_COUNTY;
};

const rawVenues = await getCollection("venues");

const normalizedVenues = rawVenues.map((entry) => {
  const cityFragments = splitLocationFragments(entry.data.city);
  const regionFragments = splitLocationFragments(entry.data.region);

  const rawCity = cityFragments.length > 0
    ? cityFragments[cityFragments.length - 1]
    : regionFragments.length > 0
      ? regionFragments[regionFragments.length - 1]
      : "Okänd";

  const formattedCityRaw = titleCase(rawCity);
  const formattedCity = formattedCityRaw === "Okänd" ? "Övriga orter" : formattedCityRaw;

  const rawRegionCandidate = regionFragments.length > 0
    ? regionFragments[regionFragments.length - 1]
    : formattedCityRaw !== "Okänd"
      ? formattedCity
      : "Sverige";

  const formattedRegion = titleCase(rawRegionCandidate);

  const county = mapToCounty([...regionFragments, rawRegionCandidate, formattedCity], formattedCity);

  const startPrice = Number(entry.data.startPrice) || 0;
  const capacity = Number(entry.data.capacity) || 0;

  return {
    ...entry,
    data: {
      ...entry.data,
      city: formattedCity,
      region: county,
      startPrice,
      capacity,
    },
  };
});

const styles = dedupeCaseInsensitive(
  normalizedVenues
    .map((entry) => entry.data.style)
    .filter((style) => style && style.toLowerCase() !== "okänd"),
).sort((a, b) => a.localeCompare(b, "sv-SE"));

const counties = dedupeCaseInsensitive(
  normalizedVenues
    .map((entry) => entry.data.region)
    .filter((region) => region && region !== DEFAULT_COUNTY),
).sort((a, b) => a.localeCompare(b, "sv-SE"));

const maxPrice = normalizedVenues.reduce(
  (max, entry) => Math.max(max, entry.data.startPrice || 0),
  0,
);
const maxCapacity = normalizedVenues.reduce(
  (max, entry) => Math.max(max, entry.data.capacity || 0),
  0,
);

const priceSliderMax = maxPrice > 0 ? maxPrice : 100000;
const capacitySliderMax = maxCapacity > 0 ? maxCapacity : 300;
---
<BaseLayout
  title="Bröllopslokaler i Sverige"
  description="Utforska bröllopslokaler efter stil, kapacitet och budget."
>
  <section class="intro">
    <h1>Bröllopslokaler – hitta rätt plats för er dag</h1>
    <p>
      Använd sök och filter för att hitta lokaler som matchar ert datum, gästantal och budget. Klicka in på varje lokal för detaljerad information och kontaktuppgifter.
    </p>
  </section>

  <section class="filters" data-filter-root>
    <label>
      Sök
      <input type="search" placeholder="Sök på namn eller beskrivning" data-filter="query" />
    </label>
    <label>
      Län
      <select data-filter="county">
        <option value="">Alla län</option>
        {[...counties, DEFAULT_COUNTY].map((county) => (
          <option value={county}>{county}</option>
        ))}
      </select>
    </label>
    <label>
      Stil
      <select data-filter="style">
        <option value="">Alla stilar</option>
        {styles.map((style) => (
          <option value={style}>{style}</option>
        ))}
      </select>
    </label>
    <label>
      Max startpris (kr)
      <input type="range" min="0" max={priceSliderMax} step="1000" data-filter="price" value={priceSliderMax} />
      <span class="range-value" data-filter-price-value>{priceSliderMax.toLocaleString("sv-SE")} kr</span>
    </label>
    <label>
      Min kapacitet
      <input type="range" min="0" max={capacitySliderMax} step="10" data-filter="capacity" value="0" />
      <span class="range-value" data-filter-capacity-value>Alla</span>
    </label>
  </section>

  <VenueMap venues={normalizedVenues} />

  <section class="grid" data-directory-grid>
    {normalizedVenues.map((venue) => (
      <DirectoryCard
        title={venue.data.title}
        summary={venue.data.summary}
        city={venue.data.city}
        region={venue.data.region}
        startPrice={venue.data.startPrice || 0}
        capacity={venue.data.capacity || 0}
        image={venue.data.image}
        style={venue.data.style && venue.data.style.toLowerCase() !== "okänd" ? venue.data.style : undefined}
        href={`/lokaler/${venue.slug}`}
      />
    ))}
  </section>
</BaseLayout>

<script is:inline>
  const root = document.querySelector('[data-filter-root]');
  if (root) {
    const queryInput = root.querySelector('[data-filter="query"]');
    const countySelect = root.querySelector('[data-filter="county"]');
    const styleSelect = root.querySelector('[data-filter="style"]');
    const priceRange = root.querySelector('[data-filter="price"]');
    const capacityRange = root.querySelector('[data-filter="capacity"]');
    const priceValueEl = root.querySelector('[data-filter-price-value]');
    const capacityValueEl = root.querySelector('[data-filter-capacity-value]');
    const cards = Array.from(document.querySelectorAll('[data-directory-grid] .card'));

    const formatNumber = (value) => Number(value || 0).toLocaleString('sv-SE');

    const applyFilters = () => {
      const query = queryInput?.value.toLowerCase().trim() ?? '';
      const county = countySelect?.value ?? '';
      const style = styleSelect?.value ?? '';
      const maxPrice = Number(priceRange?.value ?? 0) || 0;
      const minCapacity = Number(capacityRange?.value ?? 0) || 0;

      cards.forEach((card) => {
        const title = card.dataset.title ?? card.querySelector('h3')?.textContent?.toLowerCase() ?? '';
        const summary = card.querySelector('.summary')?.textContent?.toLowerCase() ?? '';
        const cardCity = card.dataset.city ?? '';
        const cardRegion = card.dataset.region ?? '';
        const cardStyle = card.dataset.style ?? '';
        const startPrice = Number(card.dataset.startPrice ?? 0);
        const capacity = Number(card.dataset.capacity ?? 0);

        const matchesQuery = !query || title.includes(query) || summary.includes(query);
        const matchesCounty = !county || cardRegion === county;
        const matchesStyle = !style || cardStyle === style;
        const matchesPrice = !maxPrice || startPrice <= maxPrice;
        const matchesCapacity = !minCapacity || capacity >= minCapacity;

        card.classList.toggle('hidden', !(matchesQuery && matchesCounty && matchesStyle && matchesPrice && matchesCapacity));
      });
    };

    const updateRangeLabels = () => {
      if (priceValueEl && priceRange) {
        priceValueEl.textContent = `${formatNumber(priceRange.value)} kr`;
      }
      if (capacityValueEl && capacityRange) {
        const value = Number(capacityRange.value || 0);
        capacityValueEl.textContent = value > 0 ? `${value}+ gäster` : 'Alla';
      }
    };

    [queryInput, countySelect, styleSelect, priceRange, capacityRange]
      .filter(Boolean)
      .forEach((input) => input.addEventListener('input', () => {
        updateRangeLabels();
        applyFilters();
      }));

    updateRangeLabels();
  }
</script>

<style>
  .intro {
    display: grid;
    gap: 1.5rem;
    margin-bottom: 1.5rem;
  }

  .filters {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .filters label {
    display: grid;
    gap: 0.4rem;
    font-weight: 600;
  }

  .filters input,
  .filters select {
    padding: 0.75rem 1rem;
    border-radius: 0.9rem;
    border: 1px solid rgba(0, 0, 0, 0.16);
  }

  .filters input[type="range"] {
    padding: 0;
  }

  .range-value {
    font-size: 0.85rem;
    color: rgba(31, 28, 20, 0.65);
  }

  .grid {
    display: grid;
    gap: 1.5rem;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  }

  .card.hidden {
    display: none;
  }
</style>
