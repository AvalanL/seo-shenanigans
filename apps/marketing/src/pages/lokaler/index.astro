---
import BaseLayout from "~/layouts/BaseLayout.astro";
import DirectoryCard from "~/components/directory/DirectoryCard.astro";
import VenueMap from "~/components/directory/VenueMap.astro";
import { getCollection } from "astro:content";

const normalizeWhitespace = (value: string) =>
  value
    .replace(/\s+/g, " ")
    .trim();

const removePostalPrefix = (value: string) =>
  value
    .replace(/\b\d{2,}\b/g, " ")
    .replace(/\s+/g, " ")
    .trim();

const splitLocationFragments = (value?: string | null) => {
  if (!value) return [] as string[];
  return value
    .split(/[\n,/]/)
    .map((part) => normalizeWhitespace(removePostalPrefix(part)))
    .filter(
      (part) =>
        part.length > 0 &&
        !/vägbeskrivning/i.test(part) &&
        !/^sverige$/i.test(part) &&
        !/^se$/i.test(part),
    );
};

const titleCase = (value: string) =>
  value
    .split("-")
    .map((segment) =>
      segment
        .split(" ")
        .map((word) =>
          word
            ? word[0].toLocaleUpperCase("sv-SE") + word.slice(1).toLocaleLowerCase("sv-SE")
            : word,
        )
        .join(" "),
    )
    .join("-")
    .replace(/\s+/g, " ")
    .trim();

const dedupeCaseInsensitive = (values: string[]) => {
  const seen = new Set<string>();
  const result: string[] = [];
  for (const value of values) {
    const key = value.toLocaleLowerCase("sv-SE");
    if (!seen.has(key)) {
      seen.add(key);
      result.push(value);
    }
  }
  return result;
};

const rawVenues = await getCollection("venues");

const normalizedVenues = rawVenues.map((entry) => {
  const cityFragments = splitLocationFragments(entry.data.city);
  const regionFragments = splitLocationFragments(entry.data.region);

  const rawCity = cityFragments.length > 0
    ? cityFragments[cityFragments.length - 1]
    : regionFragments.length > 0
      ? regionFragments[regionFragments.length - 1]
      : "Okänd";

  const formattedCity = titleCase(rawCity);

  const rawRegionCandidate = regionFragments.length > 0
    ? regionFragments[regionFragments.length - 1]
    : formattedCity !== "Okänd"
      ? formattedCity
      : "Sverige";

  const formattedRegion = titleCase(rawRegionCandidate);

  const startPrice = Number(entry.data.startPrice) || 0;
  const capacity = Number(entry.data.capacity) || 0;

  return {
    ...entry,
    data: {
      ...entry.data,
      city: formattedCity,
      region: formattedRegion,
      startPrice,
      capacity,
    },
  };
});

const cities = dedupeCaseInsensitive(
  normalizedVenues
    .map((entry) => entry.data.city)
    .filter((city) => city && city !== "Okänd"),
).sort((a, b) => a.localeCompare(b, "sv-SE"));

const styles = dedupeCaseInsensitive(
  normalizedVenues
    .map((entry) => entry.data.style)
    .filter((style) => style && style.toLowerCase() !== "okänd"),
).sort((a, b) => a.localeCompare(b, "sv-SE"));

const maxPrice = Math.max(...normalizedVenues.map((entry) => entry.data.startPrice || 0));
const maxCapacity = Math.max(...normalizedVenues.map((entry) => entry.data.capacity || 0));
---
<BaseLayout
  title="Bröllopslokaler i Sverige"
  description="Utforska bröllopslokaler efter stil, kapacitet och budget."
>
  <section class="intro">
    <h1>Bröllopslokaler – hitta rätt plats för er dag</h1>
    <p>
      Använd sök och filter för att hitta lokaler som matchar ert datum, gästantal och budget. Klicka in på varje lokal för detaljerad information och kontaktuppgifter.
    </p>
  </section>

  <section class="filters" data-filter-root>
    <label>
      Sök
      <input type="search" placeholder="Sök på namn eller beskrivning" data-filter="query" />
    </label>
    <label>
      Stad
      <select data-filter="city">
        <option value="">Alla städer</option>
        {cities.map((city) => (
          <option value={city}>{city}</option>
        ))}
      </select>
    </label>
    <label>
      Stil
      <select data-filter="style">
        <option value="">Alla stilar</option>
        {styles.map((style) => (
          <option value={style}>{style}</option>
        ))}
      </select>
    </label>
    <label>
      Max startpris (kr)
      <input type="range" min="0" max={maxPrice} step="1000" data-filter="price" value={maxPrice} />
      <span class="range-value" data-filter-price-value>{maxPrice.toLocaleString("sv-SE")} kr</span>
    </label>
    <label>
      Min kapacitet
      <input type="range" min="0" max={maxCapacity} step="10" data-filter="capacity" value="0" />
      <span class="range-value" data-filter-capacity-value>Alla</span>
    </label>
  </section>

  <VenueMap venues={normalizedVenues} />

  <section class="grid" data-directory-grid>
    {normalizedVenues.map((venue) => (
      <DirectoryCard
        title={venue.data.title}
        summary={venue.data.summary}
        city={venue.data.city}
        region={venue.data.region}
        startPrice={venue.data.startPrice || 0}
        capacity={venue.data.capacity || 0}
        image={venue.data.image}
        style={venue.data.style}
        href={`/lokaler/${venue.slug}`}
      />
    ))}
  </section>
</BaseLayout>

<script is:inline>
  const root = document.querySelector('[data-filter-root]');
  if (root) {
    const queryInput = root.querySelector('[data-filter="query"]');
    const citySelect = root.querySelector('[data-filter="city"]');
    const styleSelect = root.querySelector('[data-filter="style"]');
    const priceRange = root.querySelector('[data-filter="price"]');
    const capacityRange = root.querySelector('[data-filter="capacity"]');
    const priceValueEl = root.querySelector('[data-filter-price-value]');
    const capacityValueEl = root.querySelector('[data-filter-capacity-value]');
    const cards = Array.from(document.querySelectorAll('[data-directory-grid] .card'));

    const formatNumber = (value) => Number(value || 0).toLocaleString('sv-SE');

    const applyFilters = () => {
      const query = queryInput?.value.toLowerCase().trim() ?? '';
      const city = citySelect?.value ?? '';
      const style = styleSelect?.value ?? '';
      const maxPrice = Number(priceRange?.value ?? 0) || 0;
      const minCapacity = Number(capacityRange?.value ?? 0) || 0;

      cards.forEach((card) => {
        const title = card.dataset.title ?? card.querySelector('h3')?.textContent?.toLowerCase() ?? '';
        const summary = card.querySelector('.summary')?.textContent?.toLowerCase() ?? '';
        const cardCity = card.dataset.city ?? '';
        const cardRegion = card.dataset.region ?? '';
        const cardStyle = card.dataset.style ?? '';
        const startPrice = Number(card.dataset.startPrice ?? 0);
        const capacity = Number(card.dataset.capacity ?? 0);

        const matchesQuery = !query || title.includes(query) || summary.includes(query);
        const matchesCity = !city || cardCity === city || cardRegion === city;
        const matchesStyle = !style || cardStyle === style;
        const matchesPrice = !maxPrice || startPrice <= maxPrice;
        const matchesCapacity = !minCapacity || capacity >= minCapacity;

        card.classList.toggle('hidden', !(matchesQuery && matchesCity && matchesStyle && matchesPrice && matchesCapacity));
      });
    };

    const updateRangeLabels = () => {
      if (priceValueEl && priceRange) {
        priceValueEl.textContent = `${formatNumber(priceRange.value)} kr`;
      }
      if (capacityValueEl && capacityRange) {
        const value = Number(capacityRange.value || 0);
        capacityValueEl.textContent = value > 0 ? `${value}+ gäster` : 'Alla';
      }
    };

    [queryInput, citySelect, styleSelect, priceRange, capacityRange]
      .filter(Boolean)
      .forEach((input) => input.addEventListener('input', () => {
        updateRangeLabels();
        applyFilters();
      }));

    updateRangeLabels();
  }
</script>

<style>
  .intro {
    display: grid;
    gap: 1.5rem;
    margin-bottom: 1.5rem;
  }

  .filters {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .filters label {
    display: grid;
    gap: 0.4rem;
    font-weight: 600;
  }

  .filters input,
  .filters select {
    padding: 0.75rem 1rem;
    border-radius: 0.9rem;
    border: 1px solid rgba(0, 0, 0, 0.16);
  }

  .filters input[type="range"] {
    padding: 0;
  }

  .range-value {
    font-size: 0.85rem;
    color: rgba(31, 28, 20, 0.65);
  }

  .grid {
    display: grid;
    gap: 1.5rem;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  }

  .card.hidden {
    display: none;
  }
</style>
