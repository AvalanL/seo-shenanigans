---
import { getCollection } from 'astro:content';
import BaseLayout from '~/layouts/BaseLayout.astro';
import cities from '../../../../data/cities.json';

export async function getStaticPaths() {
  // Define services that have programmatic content
  const services = ['brollopsfotograf', 'brollopslokal'];

  // Map URL-safe service names to data keys
  const serviceMapping = {
    'brollopsfotograf': 'bröllopsfotograf',
    'brollopslokal': 'bröllopslokal'
  };

  const paths = [];

  Object.entries(cities).forEach(([cityKey, cityData]) => {
    services.forEach(service => {
      const dataKey = serviceMapping[service];
      if (cityData.pricing[dataKey]) {
        paths.push({
          params: {
            service: service,
            city: cityKey
          },
          props: {
            cityData: cityData,
            cityKey: cityKey,
            service: service,
            dataKey: dataKey
          }
        });
      }
    });
  });

  return paths;
}

const { cityData, cityKey, service, dataKey } = Astro.props;

// Map URL-safe service names to data keys for template use
const serviceMapping = {
  'brollopsfotograf': 'bröllopsfotograf',
  'brollopslokal': 'bröllopslokal'
};
const services = ['brollopsfotograf', 'brollopslokal'];
const currentYear = new Date().getFullYear();

// Get programmatic content
let programmaticEntry;
try {
  const programmaticContent = await getCollection('programmatic');
  const slug = `${service}-${cityKey}-${currentYear}`;
  programmaticEntry = programmaticContent.find(entry => entry.slug === slug);
} catch (error) {
  console.warn('Programmatic content not found, using fallback');
}

// Fallback data if programmatic content doesn't exist
const fallbackData = {
  title: `${service.charAt(0).toUpperCase() + service.slice(1)} ${cityData.name} ${currentYear} - Från ${cityData.pricing[dataKey].min.toLocaleString('sv-SE')} kr`,
  description: `Hitta bästa ${service} i ${cityData.name}. ${cityData.supplierCounts[dataKey]}+ leverantörer, priser från ${cityData.pricing[dataKey].min.toLocaleString('sv-SE')} kr.`,
  summary: `Komplett guide för ${service} i ${cityData.name} med priser, leverantörer och lokala tips för ${currentYear}.`
};

const pageData = programmaticEntry?.data || fallbackData;
const Content = programmaticEntry ? (await programmaticEntry.render()).Content : null;
---

<BaseLayout
  title={pageData.title}
  description={pageData.description}
  keywords={pageData.secondaryKeywords || [`${service} ${cityKey}`, `${service} ${cityData.name}`, `${service} pris ${cityKey}`]}
>
  <!-- Structured Data for Local Business -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "LocalBusiness",
    "name": pageData.title,
    "description": pageData.description,
    "address": {
      "@type": "PostalAddress",
      "addressLocality": cityData.name,
      "addressRegion": cityData.region,
      "addressCountry": "SE"
    },
    "priceRange": `${cityData.pricing[dataKey].min}-${cityData.pricing[dataKey].max} SEK`,
    "aggregateRating": {
      "@type": "AggregateRating",
      "ratingValue": "4.7",
      "reviewCount": cityData.supplierCounts[dataKey]
    }
  })} />

  <!-- Breadcrumbs -->
  <nav aria-label="breadcrumb" class="breadcrumb">
    <ol>
      <li><a href="/">Hem</a></li>
      <li><a href="/leverantörer">Leverantörer</a></li>
      <li><a href={`/leverantörer/${service}`}>{service.charAt(0).toUpperCase() + service.slice(1)}</a></li>
      <li aria-current="page">{cityData.name}</li>
    </ol>
  </nav>

  <main>
    <!-- Hero Section -->
    <section class="programmatic-hero">
      <div class="hero-content">
        <h1>{pageData.title}</h1>
        <p class="lead">{pageData.summary}</p>

        <div class="key-stats">
          <div class="stat">
            <strong>{cityData.supplierCounts[dataKey]}+</strong>
            <span>Leverantörer</span>
          </div>
          <div class="stat">
            <strong>{cityData.pricing[dataKey].avg?.toLocaleString('sv-SE') || 'Från'} kr</strong>
            <span>Genomsnittspris</span>
          </div>
          <div class="stat">
            <strong>{cityData.searchVolumes[dataKey] || 'N/A'}+</strong>
            <span>Sökningar/månad</span>
          </div>
        </div>
      </div>
    </section>

    <!-- Main Content -->
    <article class="programmatic-content">
      {Content ? <Content /> : (
        <div>
          <h2>Priser och paket {currentYear}</h2>

          <div class="price-ranges">
            <div class="price-tier">
              <h3>Budget-alternativ</h3>
              <p class="price">{cityData.pricing[dataKey].min.toLocaleString('sv-SE')} - {(cityData.pricing[dataKey].avg - 10000).toLocaleString('sv-SE')} kr</p>
              <p>Grundläggande paket för mindre bröllop</p>
            </div>

            <div class="price-tier featured">
              <h3>Standard-paket</h3>
              <p class="price">{(cityData.pricing[dataKey].avg - 5000).toLocaleString('sv-SE')} - {(cityData.pricing[dataKey].avg + 10000).toLocaleString('sv-SE')} kr</p>
              <p>Mest populära alternativet</p>
            </div>

            <div class="price-tier">
              <h3>Premium-upplevelse</h3>
              <p class="price">{(cityData.pricing[dataKey].avg + 15000).toLocaleString('sv-SE')} - {cityData.pricing[dataKey].max.toLocaleString('sv-SE')}+ kr</p>
              <p>Exklusiva paket med extra tjänster</p>
            </div>
          </div>

          <h2>Lokala faktorer i {cityData.name}</h2>
          <ul>
            <li><strong>Säsong:</strong> {cityData.seasonality.peak} - {cityData.seasonality.priceIncrease} högre priser</li>
            <li><strong>Transport:</strong> {cityData.transport.public}</li>
            <li><strong>Populära lokaler:</strong> {cityData.popularVenues.slice(0, 3).join(', ')}</li>
          </ul>

          <h2>Vanliga frågor</h2>

          <div class="faq-item">
            <h3>Vad kostar {service} i {cityData.name}?</h3>
            <p>Priserna varierar mellan {cityData.pricing[dataKey].min.toLocaleString('sv-SE')} kr och {cityData.pricing[dataKey].max.toLocaleString('sv-SE')} kr med genomsnitt på {cityData.pricing[dataKey].avg.toLocaleString('sv-SE')} kr.</p>
          </div>

          <div class="faq-item">
            <h3>Hur många leverantörer finns det i {cityData.name}?</h3>
            <p>Vi har kartlagt {cityData.supplierCounts[dataKey]} professionella leverantörer i {cityData.name} med olika specialiteter och prisklasser.</p>
          </div>

          <div class="faq-item">
            <h3>När ska man boka?</h3>
            <p>Boka minst 8-12 månader i förväg för {cityData.seasonality.peak}. För övriga månader räcker ofta 4-6 månader.</p>
          </div>
        </div>
      )}
    </article>

    <!-- Related Services -->
    <aside class="related-services">
      <h3>Relaterade tjänster i {cityData.name}</h3>
      <ul class="service-links">
        {services.filter(s => s !== service && cityData.pricing[serviceMapping[s]]).map(relatedService => (
          <li><a href={`/leverantörer/${relatedService}/${cityKey}`}>
            {relatedService.charAt(0).toUpperCase() + relatedService.slice(1)} {cityData.name}
          </a></li>
        ))}
      </ul>

      <h3>Samma tjänst i andra städer</h3>
      <ul class="city-links">
        {Object.entries(cities)
          .filter(([key, data]) => key !== cityKey && data.pricing[dataKey])
          .slice(0, 4)
          .map(([key, data]) => (
            <li><a href={`/leverantörer/${service}/${key}`}>
              {service.charAt(0).toUpperCase() + service.slice(1)} {data.name}
            </a></li>
          ))
        }
      </ul>
    </aside>

    <!-- CTA Section -->
    <section class="programmatic-cta">
      <h2>Planerar ni bröllop i {cityData.name}?</h2>
      <p>Använd våra verktyg för att jämföra leverantörer och planera er budget.</p>
        <div class="cta-buttons">
          <a href="/budget/budgetkalkylator?ref=leverantörer-city" class="btn primary">Skapa budget</a>
        <a href="/guides/brollopsplanering-grundkurs" class="btn secondary">Planerings-guide</a>
      </div>
    </section>
  </main>
</BaseLayout>

<style>
.programmatic-hero {
  background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
  padding: 3rem 0;
  text-align: center;
}

.key-stats {
  display: flex;
  justify-content: center;
  gap: 2rem;
  margin-top: 2rem;
  flex-wrap: wrap;
}

.stat {
  text-align: center;
  padding: 1rem;
}

.stat strong {
  display: block;
  font-size: 1.5rem;
  color: #B26D4A;
  font-weight: 700;
}

.stat span {
  font-size: 0.9rem;
  color: #666;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.breadcrumb {
  padding: 1rem 0;
  border-bottom: 1px solid #eee;
  max-width: 1200px;
  margin: 0 auto;
  padding-left: 1rem;
  padding-right: 1rem;
}

.breadcrumb ol {
  display: flex;
  list-style: none;
  padding: 0;
  margin: 0;
}

.breadcrumb li:not(:last-child):after {
  content: "›";
  margin: 0 0.5rem;
  color: #999;
}

.breadcrumb a {
  color: #B26D4A;
  text-decoration: none;
}

.breadcrumb a:hover {
  text-decoration: underline;
}

.programmatic-content {
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem;
  line-height: 1.6;
}

.price-ranges {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  margin: 2rem 0;
}

.price-tier {
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 1.5rem;
  text-align: center;
}

.price-tier.featured {
  border-color: #B26D4A;
  background: #fff9f7;
}

.price {
  font-size: 1.25rem;
  font-weight: bold;
  color: #B26D4A;
  margin: 1rem 0;
}

.faq-item {
  margin: 1.5rem 0;
  padding: 1rem;
  border-left: 4px solid #B26D4A;
  background: #f8f9fa;
}

.faq-item h3 {
  margin-top: 0;
  color: #B26D4A;
}

.related-services {
  background: #f8f9fa;
  padding: 2rem;
  border-radius: 8px;
  margin: 3rem auto;
  max-width: 800px;
}

.related-services h3 {
  margin-top: 0;
  color: #B26D4A;
}

.service-links, .city-links {
  list-style: none;
  padding: 0;
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
}

.service-links a, .city-links a {
  color: #B26D4A;
  text-decoration: none;
  padding: 0.5rem 1rem;
  border: 1px solid #B26D4A;
  border-radius: 4px;
  font-size: 0.9rem;
}

.service-links a:hover, .city-links a:hover {
  background: #B26D4A;
  color: white;
}

.programmatic-cta {
  background: #B26D4A;
  color: white;
  text-align: center;
  padding: 3rem 2rem;
  border-radius: 8px;
  margin: 3rem auto;
  max-width: 800px;
}

.programmatic-cta h2 {
  margin-top: 0;
}

.cta-buttons {
  display: flex;
  justify-content: center;
  gap: 1rem;
  margin-top: 2rem;
  flex-wrap: wrap;
}

.btn {
  padding: 1rem 2rem;
  text-decoration: none;
  border-radius: 4px;
  font-weight: bold;
  display: inline-block;
}

.btn.primary {
  background: white;
  color: #B26D4A;
}

.btn.secondary {
  background: transparent;
  color: white;
  border: 2px solid white;
}

.btn:hover.primary {
  background: #f8f9fa;
}

.btn:hover.secondary {
  background: white;
  color: #B26D4A;
}

@media (max-width: 768px) {
  .key-stats {
    flex-direction: column;
    gap: 1rem;
  }

  .service-links, .city-links {
    flex-direction: column;
  }

  .cta-buttons {
    flex-direction: column;
  }

  .programmatic-content {
    padding: 1rem;
  }
}
</style>
